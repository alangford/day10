functions inside functions are called nested functions 

functions that return functions take a snap shot of the inner function and creates its own enviorment before 
the outer function gets deleted

invoking a function and creates the closer
and maintains the function while the closer exists
function outer (num){

return function inner(num2){
	return num + num2
	}
}
var inner = outer(12)
inner(5)
will return 17.

var innerTwo = outer(100)
innerTwo(300)
will return 400.

						outer function 		inner function
example giving birth when mom gave birth i inhearited my mom traits but i'm my own person 


closer happens when the outer function is invoked!


function storeCreator(name){
	var products =[]
	return function(product){
	products.push(product)
	console.log(name + " " + products)
	}
}

var walmart = storeCreator("walmart")
var sams = storeCreator("Sams Club")
var target = storeCreator("Taget")

walmart("oranges")
sams("tvs")
target("clothes")
walmart("bananas")
walmart("lightbulbs")








/**
 * Created by beebe on 3/1/2017.
 */
function teamCreator(teamName){
    var players = [] ;
    return function(player){
        players.push(player);
        console.log(teamName + " " + players)
    }
}
var jazz = teamCreator("jazz");
jazz("Kobe Bryiant");
jazz("Dwane Wade")


when you use a closer it makes the functions var private






prototypes!




var obj = {
name: "andrew"
func: function(){
console.log(this.name)
  }
}
function Person(name){			the problem is the function is inside a constuctor function
this.name = name			every person i create is going to have that function on it! 
this.func = function(){			
	console.log(this.name)
}
}

obj.func()				with a .prototype!
Person.protoype.func = function(){	this will apply one function to every person that is created!
	console.log(this.name)
}







Array.prototype.first =function(){
return this[0]
}
var a= [1,2,3,4,5]
var b = [512, 424,124,63,124]
a.first()
b.first()






String.prototype.title =function(){
var str = this
var a = str.split(" ")
for(var i=0;i<a.length i++){
var up =a [i][0].toUpperCase()
a[i] = up + a[i].slice(1)
}
return a.join(" ")
}
var greeting = "hello my name is andrew"
gretting.title();



never rewrite an already defined prototype



Array.prototype.sum = function(){
return this.reduce(function(p,c){
return p + c;
});
}

var a = [1, 2, 3]
a.sum();



it save memrory




